

// ------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "F:\dev\OnlineTraining\OnlineTraining.Data\OnlineTraining.Model\App.config"
//     Connection String Name: "OnlineTraningDbContext"
//     Connection String:      "Persist Security Info=False;database=OnlineTraining;server=lucas-pc\sqlserverdev;user id=administrator;password=**zapped**;"
// </auto-generated>
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace OnlineTraining.Model
{
    // ************************************************************************
    // Unit of work
    public interface IOnlineTraningDbContext : IDisposable
    {
        DbSet<Answer> Answers { get; set; } // OnlineTraining_Answer
        DbSet<Module> Modules { get; set; } // OnlineTraining_Module
        DbSet<ModuleSetting> ModuleSettings { get; set; } // OnlineTraining_ModuleSetting
        DbSet<Question> Questions { get; set; } // OnlineTraining_Question

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
    }

    // ************************************************************************
    // Database context
    public partial class OnlineTraningDbContext : DbContext, IOnlineTraningDbContext
    {
        public DbSet<Answer> Answers { get; set; } // OnlineTraining_Answer
        public DbSet<Module> Modules { get; set; } // OnlineTraining_Module
        public DbSet<ModuleSetting> ModuleSettings { get; set; } // OnlineTraining_ModuleSetting
        public DbSet<Question> Questions { get; set; } // OnlineTraining_Question
        
        static OnlineTraningDbContext()
        {
            System.Data.Entity.Database.SetInitializer<OnlineTraningDbContext>(null);
        }

        public OnlineTraningDbContext()
            : base("Name=OnlineTraningDbContext")
        {
            InitializePartial();
        }

        public OnlineTraningDbContext(string connectionString) : base(connectionString)
        {
            InitializePartial();
        }

        public OnlineTraningDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnswerConfiguration());
            modelBuilder.Configurations.Add(new ModuleConfiguration());
            modelBuilder.Configurations.Add(new ModuleSettingConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnswerConfiguration(schema));
            modelBuilder.Configurations.Add(new ModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new ModuleSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(DbModelBuilder modelBuilder);
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public partial class FakeOnlineTraningDbContext : IOnlineTraningDbContext
    {
        public DbSet<Answer> Answers { get; set; }
        public DbSet<Module> Modules { get; set; }
        public DbSet<ModuleSetting> ModuleSettings { get; set; }
        public DbSet<Question> Questions { get; set; }

        public FakeOnlineTraningDbContext()
        {
            Answers = new FakeDbSet<Answer>();
            Modules = new FakeDbSet<Module>();
            ModuleSettings = new FakeDbSet<ModuleSetting>();
            Questions = new FakeDbSet<Question>();

            InitializePartial();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            throw new NotImplementedException();
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // OnlineTraining_Answer
    public partial class Answer
    {
        public int AnswerId { get; set; } // AnswerId (Primary key)
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime DateModified { get; set; } // DateModified
        public string Title { get; set; } // Title
        public bool IsCorrectAnswer { get; set; } // IsCorrectAnswer
        public string NameAndValue { get; set; } // NameAndValue
        public int QuestionId { get; set; } // QuestionId

        // Foreign keys
        public virtual Question Question { get; set; } // FK_OnlineTraining_Answer_OnlineTraining_Question
        
        public Answer()
        {
            IsCorrectAnswer = false;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OnlineTraining_Module
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public partial class Module
    {
        public int ModuleId { get; set; } // ModuleId (Primary key)
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime DateModified { get; set; } // DateModified
        public string Title { get; set; } // Title
        public int ModuleSettingId { get; set; } // ModuleSettingId
        public string Description { get; set; } // Description
        public string Content { get; set; } // Content

        // Reverse navigation
        public virtual ICollection<Question> Questions { get; set; } // OnlineTraining_Question.FK_OnlineTraining_Question_OnlineTraining_Module

        // Foreign keys
        public virtual ModuleSetting ModuleSetting { get; set; } // FK_OnlineTrainingModule_OnlineTrainingModuleSetting
        
        public Module()
        {
            Questions = new List<Question>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OnlineTraining_ModuleSetting
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public partial class ModuleSetting
    {
        public int ModuleSettingId { get; set; } // ModuleSettingId (Primary key)
        public string SettingName { get; set; } // SettingName
        public DateTime DateCreated { get; set; } // DateCreated
        public DateTime DateModified { get; set; } // DateModified
        public bool PopupIntroduction { get; set; } // PopupIntroduction
        public bool ShowAnswerSheet { get; set; } // ShowAnswerSheet
        public bool LoadAnswer { get; set; } // LoadAnswer
        public bool CheckAnswer { get; set; } // CheckAnswer
        public bool HasScore { get; set; } // HasScore
        public bool PassRequired { get; set; } // PassRequired
        public int AttemptTimes { get; set; } // AttemptTimes
        public int? PassPercentage { get; set; } // PassPercentage
        public string Description { get; set; } // Description
        public int? RewardsPoint { get; set; } // RewardsPoint

        // Reverse navigation
        public virtual ICollection<Module> Modules { get; set; } // OnlineTraining_Module.FK_OnlineTrainingModule_OnlineTrainingModuleSetting
        
        public ModuleSetting()
        {
            PopupIntroduction = false;
            ShowAnswerSheet = false;
            LoadAnswer = false;
            CheckAnswer = false;
            HasScore = false;
            PassRequired = false;
            AttemptTimes = 0;
            Modules = new List<Module>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // OnlineTraining_Question
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.15.2.0")]
    public partial class Question
    {
        public int QuestionId { get; set; } // QuestionId (Primary key)
        public string Title { get; set; } // Title
        public string Description { get; set; } // Description
        public int QuestionType { get; set; } // QuestionType
        public int? Score { get; set; } // Score
        public int? AnswerMaxLength { get; set; } // AnswerMaxLength
        public int RepeatDirection { get; set; } // RepeatDirection
        public int ModuleId { get; set; } // ModuleId
        public int? CopyFromQuestionId { get; set; } // CopyFromQuestionId

        // Reverse navigation
        public virtual ICollection<Answer> Answers { get; set; } // OnlineTraining_Answer.FK_OnlineTraining_Answer_OnlineTraining_Question
        public virtual ICollection<Question> Questions { get; set; } // OnlineTraining_Question.FK_OnlineTraining_Question_OnlineTraining_Question

        // Foreign keys
        public virtual Module Module { get; set; } // FK_OnlineTraining_Question_OnlineTraining_Module
        public virtual Question Question_CopyFromQuestionId { get; set; } // FK_OnlineTraining_Question_OnlineTraining_Question
        
        public Question()
        {
            Answers = new List<Answer>();
            Questions = new List<Question>();
            InitializePartial();
        }

        partial void InitializePartial();
    }


    // ************************************************************************
    // POCO Configuration

    // OnlineTraining_Answer
    public partial class AnswerConfiguration : EntityTypeConfiguration<Answer>
    {
        public AnswerConfiguration()
            : this("dbo")
        {
        }
 
        public AnswerConfiguration(string schema)
        {
            ToTable(schema + ".OnlineTraining_Answer");
            HasKey(x => x.AnswerId);

            Property(x => x.AnswerId).HasColumnName("AnswerId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DateCreated).HasColumnName("DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateModified).HasColumnName("DateModified").IsRequired().HasColumnType("datetime");
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.IsCorrectAnswer).HasColumnName("IsCorrectAnswer").IsRequired().HasColumnType("bit");
            Property(x => x.NameAndValue).HasColumnName("NameAndValue").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.QuestionId).HasColumnName("QuestionId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.Answers).HasForeignKey(c => c.QuestionId); // FK_OnlineTraining_Answer_OnlineTraining_Question
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OnlineTraining_Module
    public partial class ModuleConfiguration : EntityTypeConfiguration<Module>
    {
        public ModuleConfiguration()
            : this("dbo")
        {
        }
 
        public ModuleConfiguration(string schema)
        {
            ToTable(schema + ".OnlineTraining_Module");
            HasKey(x => x.ModuleId);

            Property(x => x.ModuleId).HasColumnName("ModuleId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.DateCreated).HasColumnName("DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateModified).HasColumnName("DateModified").IsRequired().HasColumnType("datetime");
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.ModuleSettingId).HasColumnName("ModuleSettingId").IsRequired().HasColumnType("int");
            Property(x => x.Description).HasColumnName("Description").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.Content).HasColumnName("Content").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);

            // Foreign keys
            HasRequired(a => a.ModuleSetting).WithMany(b => b.Modules).HasForeignKey(c => c.ModuleSettingId); // FK_OnlineTrainingModule_OnlineTrainingModuleSetting
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OnlineTraining_ModuleSetting
    public partial class ModuleSettingConfiguration : EntityTypeConfiguration<ModuleSetting>
    {
        public ModuleSettingConfiguration()
            : this("dbo")
        {
        }
 
        public ModuleSettingConfiguration(string schema)
        {
            ToTable(schema + ".OnlineTraining_ModuleSetting");
            HasKey(x => x.ModuleSettingId);

            Property(x => x.ModuleSettingId).HasColumnName("ModuleSettingId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.SettingName).HasColumnName("SettingName").IsRequired().HasColumnType("nvarchar").HasMaxLength(250);
            Property(x => x.DateCreated).HasColumnName("DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateModified).HasColumnName("DateModified").IsRequired().HasColumnType("datetime");
            Property(x => x.PopupIntroduction).HasColumnName("PopupIntroduction").IsRequired().HasColumnType("bit");
            Property(x => x.ShowAnswerSheet).HasColumnName("ShowAnswerSheet").IsRequired().HasColumnType("bit");
            Property(x => x.LoadAnswer).HasColumnName("LoadAnswer").IsRequired().HasColumnType("bit");
            Property(x => x.CheckAnswer).HasColumnName("CheckAnswer").IsRequired().HasColumnType("bit");
            Property(x => x.HasScore).HasColumnName("HasScore").IsRequired().HasColumnType("bit");
            Property(x => x.PassRequired).HasColumnName("PassRequired").IsRequired().HasColumnType("bit");
            Property(x => x.AttemptTimes).HasColumnName("AttemptTimes").IsRequired().HasColumnType("int");
            Property(x => x.PassPercentage).HasColumnName("PassPercentage").IsOptional().HasColumnType("int");
            Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.RewardsPoint).HasColumnName("RewardsPoint").IsOptional().HasColumnType("int");
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // OnlineTraining_Question
    public partial class QuestionConfiguration : EntityTypeConfiguration<Question>
    {
        public QuestionConfiguration()
            : this("dbo")
        {
        }
 
        public QuestionConfiguration(string schema)
        {
            ToTable(schema + ".OnlineTraining_Question");
            HasKey(x => x.QuestionId);

            Property(x => x.QuestionId).HasColumnName("QuestionId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName("Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.Description).HasColumnName("Description").IsOptional().IsUnicode(false).HasColumnType("text").HasMaxLength(2147483647);
            Property(x => x.QuestionType).HasColumnName("QuestionType").IsRequired().HasColumnType("int");
            Property(x => x.Score).HasColumnName("Score").IsOptional().HasColumnType("int");
            Property(x => x.AnswerMaxLength).HasColumnName("AnswerMaxLength").IsOptional().HasColumnType("int");
            Property(x => x.RepeatDirection).HasColumnName("RepeatDirection").IsRequired().HasColumnType("int");
            Property(x => x.ModuleId).HasColumnName("ModuleId").IsRequired().HasColumnType("int");
            Property(x => x.CopyFromQuestionId).HasColumnName("CopyFromQuestionId").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Question_CopyFromQuestionId).WithMany(b => b.Questions).HasForeignKey(c => c.CopyFromQuestionId); // FK_OnlineTraining_Question_OnlineTraining_Question
            HasRequired(a => a.Module).WithMany(b => b.Questions).HasForeignKey(c => c.ModuleId); // FK_OnlineTraining_Question_OnlineTraining_Module
            InitializePartial();
        }
        partial void InitializePartial();
    }

}

